#Predicting the age of abalone (rings+1.5)based on its sex,Length,Diameter,Height,Whole weight
#and Shucked weight ,Viscera weight,Shell weight
#will use Linear Regression
ablon <- as.data.frame(read.csv("C:/Users/ABDELRAHMAN ARAFA/Desktop/abalone.data.csv"),sep=",")
colnames(ablon)[1]="sex" ;colnames(ablon)[2]="Length"  ;colnames(ablon)[3]="Diameter"
colnames(ablon)[4]="Height" ;colnames(ablon)[5]="Whole_weight"  ;colnames(ablon)[6]="Shucked_weight"
colnames(ablon)[7]="Viscera_weight" ;colnames(ablon)[8]="Shell_weight"  ;colnames(ablon)[9]="Rings"
#there is no missing valuse ... but to be sure
ablon=na.omit(ablon)
summary(ablon)
head(ablon)
#now Data is ready to use
pairs(~Length + Diameter + Height + Whole_weight+ Shucked_weight + Viscera_weight + Shell_weight + Rings,data = ablon)
#we will ignore the sex in our linear regresion
X_data = ablon[,2:8]
Y_data = ablon[9]
?lm
output <- lm(~Y_data + X_data,ablon)
output <- lm(Y_data ~ X_data,ablon)
#there is no missing valuse ... but to be sure
ablon=na.omit(ablon)
colnames(ablon)[1]="sex" ;colnames(ablon)[2]="Length"  ;colnames(ablon)[3]="Diameter"
colnames(ablon)[4]="Height" ;colnames(ablon)[5]="Whole_weight"  ;colnames(ablon)[6]="Shucked_weight"
colnames(ablon)[7]="Viscera_weight" ;colnames(ablon)[8]="Shell_weight"  ;colnames(ablon)[9]="Rings"
output <- lm(Rings ~ sex +Length + Diameter + Height + Whole_weight+ Shucked_weight + Viscera_weight + Shell_weight ,ablon)
summary(output)
output <- lm(Rings ~  Diameter + Height + Whole_weight+  Shell_weight ,ablon)
summary(output)
output <- lm(Rings ~  Diameter + Height +   Shell_weight ,ablon)
summary(output)
output <- lm(Rings ~ Height +   Shell_weight ,ablon)
summary(output)
output <- lm(Rings ~Diameter + Height + Whole_weight+ Shucked_weight + Viscera_weight + Shell_weight ,ablon)
summary(output)
plot(X_data,Y_data)
plot(X_data[1:10,],Y_data[1:10,])
plot(X_data[1:10,],Y_data[1:10,])
for(i in 1:9)
plot(X_data[1:10,i],Y_data[1:10,])
for(i in 1:8)
plot(X_data[1:10,i],Y_data[1:10,])
m=ablon[1:10,1]
m
ablon[1:10,9]
plot(ablon[1:10,1] , ablon[1:10,9])
plot(ablon[1:10,2] , ablon[1:10,9])
plot(ablon[1:10,2] , ablon[1:10,9])
Y_data[1:10,]
for(i in 2:8)
plot(X_data[1:30,i],Y_data[1:30,])
for(i in 2:8)
plot(X_data[1:30,i],Y_data[1:30,],ylab="Rings")
clear
colnames(X_data[i])
colnames(X_data)[1]
for(i in 2:8)
plot(X_data[1:30,i],Y_data[1:30,],ylab="Rings",xlab=colnames(X_data)[i])
for(i in 2:8)
plot(X_data[1:30,i],Y_data[1:30,],ylab="Rings",xlab=colnames(X_data)[i])
X_data = ablon[,0:8]
X_data = ablon[,:8]
X_data = ablon[,0:8]
for(i in 1:8)
plot(X_data[1:30,i],Y_data[1:30,],ylab="Rings",xlab=colnames(X_data)[i])
#Scatterplot , Relatioon between each x and Rings
for(i in 1:8)
plot(X_data[1:30,i],Y_data[1:30,],ylab="Rings",xlab=colnames(X_data)[i])
colnames(X_data)[1]
for(i in 2:9)
plot(X_data[1:30,i],Y_data[1:30,],ylab="Rings",xlab=colnames(X_data)[i])
output <- lm(Rings ~ sex +Length + Diameter + Height + Whole_weight+ Shucked_weight + Viscera_weight + Shell_weight ,ablon)
summary(output)
summary(output)
outputLM <- lm(Rings ~  Diameter + Height + Whole_weight+ Shucked_weight + Viscera_weight + Shell_weight ,ablon)
summary(outputLM)
View(ablon)
View(ablon)
testpoint <- data.frame(0.265,0.090,0.2255,0.0995,0.0485,0.070)
y_test <- predict(outputLM,testpoint)
testpoint <- data.frame(0.265 , 0.090 , 0.2255 , 0.0995 , 0.0485 , 0.070)
y_test <- predict(outputLM,testpoint)
y_test <- predict(outputLM,testpoint,level = .95,interval = "confidence")
y_test <- predict(outputLM,testpoint)
outputLM <- lm(Rings ~  Diameter + Height + Whole_weight+ Shucked_weight + Viscera_weight + Shell_weight ,ablon)
summary(outputLM)
testpoint <- data.frame(0.265 , 0.090 , 0.2255 , 0.0995 , 0.0485 , 0.070)
y_test <- predict(outputLM,testpoint)
testpoint <- data.frame( 0.265 , 0.090 , 0.2255 , 0.0995 , 0.0485 , 0.070)
y_test <- predict(outputLM,testpoint)
testpoint <- data.frame(  Diameter ,Height , Whole_weight, Shucked_weight , Viscera_weight , Shell_weight )
Diameter= 0.265 ; Height= 0.090;  Whole_weight= 0.2255 ; Shucked_weight= 0.0995  ; Viscera_weight = 0.0485   ; Shell_weight =0.070
testpoint <- data.frame(  Diameter ,Height , Whole_weight, Shucked_weight , Viscera_weight , Shell_weight )
y_test <- predict(outputLM,testpoint)
with(outputLM , {plot(fitted.values,residuals)
points(c(min(fitted.values),max(fitted.values)),c=(0.0),type="l" )}  )
with(outputLM , {plot(fitted.values,residuals)
points(c(min(fitted.values),max(fitted.values)),type="l" )  })
with(output , {plot(fitted.values,residuals)
points(c(min(fitted.values),max(fitted.values)),type="l" )  })
plot(fitted.values,residuals)
plot(outputLM$fitted.values,outputLM$residuals)
with(output , {plot(fitted.values,residuals)
points(c(min(fitted.values),max(fitted.values)),type="l" )  })
with(outputLM , {plot(fitted.values,residuals)
points(c(min(fitted.values),max(fitted.values)),type="l" )  })
with(output , {plot(fitted.values,residuals)
points(c(min(residuals),max(residuals)),type="l" )  })
# Draw Fitting Line
with(outputLM , {plot(fitted.values,residuals)
points(c(min(fitted.values,residuals),max(fitted.values,residuals)),type="l" )  })
# Draw Fitting Line
with(outputLM , {plot(fitted.values,residuals)
points(c(min(fitted.values,residuals),max(fitted.values,residuals)),ylim=c(-40.40),type="l" )  })
# Draw Fitting Line
with(outputLM , {plot(fitted.values,residuals)
points(c(min(fitted.values,residuals),max(fitted.values,residuals)),xlim=c(-40.40),type="l" )  })
# Draw Fitting Line
with(outputLM , {plot(fitted.values,residuals)
points(c(min(fitted.values,residuals),max(fitted.values,residuals)),xlim=c(-40.40),type="l" )  })
# Draw Fitting Line
with(outputLM , {plot(fitted.values,residuals)
points(c(min(fitted.values,residuals),max(fitted.values,residuals)),xlim=c(0,40),type="l" )  })
with(outputLM , {plot(fitted.values,residuals)
points(c(min(fitted.values,residuals),max(fitted.values,residuals)),type="l" )  })
with(output , {plot(fitted.values,residuals)
points(c(min(fitted.values),max(fitted.values)),type="l" )  })
data <-read.csv("C:\Users\ABDELRAHMAN ARAFA\Desktop\Titanic.csv")
data <-read.csv("F:/Github_Repo/Applying Logistic Regression on Titanic dataset using R/Titanic.csv")
data
view(data)
rm(list = ls())
data <-read.csv("F:/Github_Repo/Applying Logistic Regression on Titanic dataset using R/Titanic.csv")
View(data)
summary(data)
dim(data)
for(i in 1:12)
sum(is.na(data[,i]))
cat( colnames(data)[i] , sum(is.na(data[,i]) ) )
for(i in 1:12)
cat( colnames(data)[i] , sum(is.na(data[,i]) ) )
for(i in 1:12)
cat( colnames(data)[i] , "   ",sum(is.na(data[,i]) ) )
for(i in 1:12)
cat( colnames(data)[i] , "   ",sum(is.na(data[,i])),"/n" )
for(i in 1:12)
cat( colnames(data)[i] , "   ",sum(is.na(data[,i])),"\n" )
for(i in 1:12)
cat( colnames(data)[i] , "",sum(is.na(data[,i])),"\n" )
sapply(data, function(x) sum(is.na(x)))
help(sapply)
#can also detect null valuse using funcition sapply
sapply(data,  sum(is.na(x)))
#can also detect null valuse using funcition sapply
sapply(data, function(sum(is.na(x))) )
#can also detect null valuse using funcition sapply
sapply(data, function( sum(is.na(x))))
d <- subset(data,select = c(2,3))
log_data <- data
log_data[6,is.na()] <- mean(log_data[6])
log_data[,6]
colnames(log_data)[,6]
log_data[6,is.na(log_data[,6])] <- mean(log_data[,6])
log_data[,is.na(log_data[,6])] <- mean(log_data[,6])
colnames(log_data)[,6]
colnames(log_data)[6]
log_data[,is.na(log_data[6])] <- mean(log_data[6])
log_data[,is.na(data$Age)] <- mean(data$Age)
?round
log_data$Age[is.na(data$Age)] <- mean(data$Age)
print ( sum(is.na(data[,6])) )
print ( sum(is.na(log_data[,6])) )
log_data$Age[is.na(data$Age)] <- mean(data$Age)
print ( sum(is.na(log_data[,6])) )
log_data$Age[is.na(log_data$Age)] <- mean(log_data$Age)
print ( sum(is.na(log_data[,6])) )
log_data$Age[is.na(log_data$Age)] <- mean(log_data$Age)
log_data
View(log_data)
log_data$Age[is.na(log_data$Age)] <- mean(log_data$Age, na,rm=TRUE)
log_data$Age[is.na(log_data$Age)] <- mean(log_data$Age, na.rm=TRUE)
round(log_data$Age,0)
log_data$Age<-round(log_data$Age,0)
print ( sum(is.na(log_data[,6])) )
for(i in 1:12)
print( colnames(data)[i] , "",sum(is.na(data[,i])),"\n" )
for(i in 1:12)
cat( colnames(data)[i] , "",sum(is.na(data[,i])),"\n" )
# delete the row of Fare missing valuse  or replace it using mean  or replace it using mean of pclass cluster
log_data$Fare[is.na(log_data$Fare)] <- mean(log_data$Fare, na.rm=TRUE)
print(is.factor(log_data$Sex))
log_data$Sex <- as.factor(log_data$Sex)
print(is.factor(log_data$Sex))
View(log_data)
View(log_data)
# Embarked feature must be numerical  so lets convert it
print(is.factor(log_data$Embarked)) # false
log_data$Embarked <- as.factor(log_data$Embarked)
print(is.factor(log_data$Embarked))     # True
contrasts(log_data$Sex)
# WE WILL CANCEL  PASSENGERID NAME Cabin colms
log_data_cleaned<- subset(log_data,select = c(2,3,5,6,7,8,10,12))
View(log_data_cleaned)
contrasts(log_data_cleaned$Sex)
contrasts(log_data_cleaned$Embarked)
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ .,family =binomial(link = "logit"),data=log_data_cleaned)
dim(log_data_cleaned)
train=log_data_cleaned[1:400,]
test=log_data_cleaned[401:418,]
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ .,family =binomial(link = "logit"),data=train)
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ log_data_cleaned$Pclass+log_data_cleaned$Sex+log_data_cleaned$Age+log_data_cleaned$SibSp+log_data_cleaned$Parch+log_data_cleaned$Fare+log_data_cleaned$Embarked ,family =binomial(link = "logit"),data=train)
fit
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ .,family =binomial(link = "logit"),data=log_data_cleaned)
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ .,family =binomial(link = "logit"),data=train)
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ .,family =binomial(link = "logit"),data=log_data_cleaned)
fit
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ .,family =binomial(link = "logit"),data=log_data_cleaned, maxit = 100)
print (predict(fit,test[,2:8]))
testpint <- test[,2:8]
View(testpint)
testpint <- test[1,2:8]
View(testpint)
print (predict(fit,testpint)
print (predict(fit,testpint))
print(predict(fit,testpint))
#now data is ready .. lets apply the log model     maxit = maxiteration to converge
fit <- glm(log_data_cleaned$Survived ~ .,family =binomial(link = "logit"),data=log_data_cleaned)
testpint <- test[1,2:8]
print(predict(fit,testpint))
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ log_data_cleaned$Pclass+log_data_cleaned$Sex+log_data_cleaned$Age+log_data_cleaned$SibSp+log_data_cleaned$Parch+log_data_cleaned$Fare+log_data_cleaned$Embarked,family =binomial(link = "logit"),data=log_data_cleaned)
testpint<- log_data_cleaned[1,2:8]
View(test)
View(testpint)
print(predict(fit,testpint))
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ log_data_cleaned$Pclass+log_data_cleaned$Sex+log_data_cleaned$Age+log_data_cleaned$SibSp+log_data_cleaned$Parch+log_data_cleaned$Fare+log_data_cleaned$Embarked,family =binomial(link = "logit"),data=log_data_cleaned)
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ log_data_cleaned$Pclass+log_data_cleaned$Sex+log_data_cleaned$Age+log_data_cleaned$SibSp+log_data_cleaned$Parch+log_data_cleaned$Fare+log_data_cleaned$Embarked,family =binomial(link = "logit"),data=log_data_cleaned,maxit=100)
predict(fit,testpint)
cat("it will be " + predict(fit,testpint) )
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ log_data_cleaned$Pclass+log_data_cleaned$Sex+log_data_cleaned$Age+log_data_cleaned$SibSp+log_data_cleaned$Parch+log_data_cleaned$Fare+log_data_cleaned$Embarked,family =binomial(link = "logit"),data=log_data_cleaned,maxit=100)
summary()
summary(fit)
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ .,family =binomial(link = "logit"),data=log_data_cleaned,maxit=100)
summary(fit)
contrasts(log_data_cleaned$Sex)
contrasts(log_data_cleaned$Embarked)
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ .,family =binomial(link = "logit"),data=log_data_cleaned[,2:8],maxit=100)
testpint<- log_data_cleaned[1,2:8]
cat("it will be " + predict(fit,testpint) )
testpint<- log_data_cleaned[1,2:8]
cat("it will be " + predict(fit,testpint) )
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ .,family =binomial(link = "logit"),data=log_data_cleaned[,1:8],maxit=100)
testpint<- log_data_cleaned[1,2:8]
cat("it will be " + predict(fit,testpint) )
testpint<- log_data_cleaned[1,2:8]
View(testpint)
data$Fare<-round(data$Fare,0)
log_data_cleaned$Fare<-round(log_data_cleaned$Fare,0)
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ .,family =binomial(link = "logit"),data=log_data_cleaned[,1:8],maxit=100)
testpint<- log_data_cleaned[1,2:8]
cat("it will be " + predict(fit,testpint) )
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ .,family =binomial(link = "logit"),data=log_data_cleaned,maxit=100)
testpint<- log_data_cleaned[1,2:8]
cat("it will be " + predict(fit,testpint) )
testpint<- data.frame(log_data_cleaned[1,2:8] )
cat("it will be " + predict(fit,testpint) )
testpint<- log_data_cleaned[1,2:8]
cat("it will be " + predict(fit,testpint) )
Preiction<- predict(fit,testpint)
print(prediction)
print(Preiction)
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ .,family =binomial(link = "logit"),data=log_data_cleaned,maxit=100)
summary(fit)
#now data is ready .. lets apply the log model
fit <- glm(log_data_cleaned$Survived ~ .,family =binomial(link = 'logit'),data=log_data_cleaned,maxit=100)
summary(fit)
#now data is ready .. lets apply the log model
fit <- glm(Survived ~ .,family =binomial(link = 'logit'),data=log_data_cleaned,maxit=100)
testpint<- log_data_cleaned[1,2:8]
Preiction<- predict(fit,testpint)
print(Preiction)
summary(fit)
#now data is ready .. lets apply the log model
fit <- glm(Survived ~ .,family =binomial(link = 'logit'),data=data,maxit=100)
summary(fit)
#now data is ready .. lets apply the log model
fit <- glm(Survived ~ .,family =binomial(link = 'logit'),data=data[,c(2,3,5,6,7,8,10,12)],maxit=100)
summary(fit)
fit <- glm(Survived ~ .,family =binomial(link = 'logit'),data=log_data_cleaned,maxit=100)
testpint<- log_data_cleaned[ 1,c(2,3,5,6,7,8,10,12)]
testpint<- log_data_cleaned[ 1,2:8]
Preiction<- predict(fit,testpint)
print(Preiction)
